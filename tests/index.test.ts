import {describe, expect, test} from "bun:test";
import "src";

describe("standardize", () => {
	test('HÃ©llÃ´ WÃ´rld â†’ hello world', () => {
		expect("HÃ©llÃ´ WÃ´rld".standardize()).toBe("hello world");
	});
	test("should keep number", () => {
		expect("1hello world".standardize()).toBe("1hello world");
	})
});

describe("unidecode", () => {
	test("should keep number", () => {
		expect("1hello world".unidecode()).toBe("1hello world");
	});
	test("should remove emoji", () => {
		expect("hello ðŸ˜„world".unidecode()).toBe("hello world");
	});
});

describe("capitalize", () => {
	test("Ã©tÃ© â‡’ Ã‰tÃ©", () =>{
		expect("Ã©tÃ©".capitalize()).toBe("Ã‰tÃ©");
	});
	test("hello world â†’ Hello World", () => {
		expect("hello world".capitalize()).toBe("Hello World");
	});
	test("1hello world â†’ 1hello World", () => {
		expect("1hello world".capitalize()).toBe("1hello World");
	});
	test("PrÃ©nom-nom â†’ PrÃ©nom-Nom", () => {
		expect("PrÃ©nom-nom".capitalize()).toBe("PrÃ©nom-Nom");
	});
	test("1 hello world â†’ 1 Hello World", () => {
		expect("1 hello world".capitalize()).toBe("1 Hello World");
	});
	test("Ã©den bonne-Ã©toile â†’ Ã‰den Bonne-Ã‰toile", () => {
		expect("Ã©den bonne-Ã©toile".capitalize()).toBe("Ã‰den Bonne-Ã‰toile");
	});
});

describe('toTitle', () => {
	test('hello world â†’ Hello world', () => {
		expect("hello world".toTitle()).toBe("Hello world");
	});
});

describe("Subtext", () =>{
	test("hello world â‡’ (Hello) â‡’ True", () =>{
		expect("Hello World".subText("Hello")).toBe(true);
	});
	test("discord channel subtext", () =>{
		expect("-# â†ª https://discord.com/channels/1295390060828616961/1295390188229652837/1295390616847472181".subText("-# â†ª https://discord.com/channels/1295390060828616961")).toBe(true);
	});
	test("empty query", () =>{
		expect("Hello World".subText("")).toBe(true);
	});
	test("null query", () =>{
		expect("Hello World".subText(null)).toBe(false);
	});
	test("null â‡’ false", () =>{
		expect("hello".subText(null)).toBe(false);
	});
	test("undef â‡’ false", () =>{
		expect("hello".subText(undefined)).toBe(false);
	});
	test("empty â‡’ true", () =>{
		expect("hello".subText("")).toBe(true);
	});
})
